import User from "../models/User.js";
import bcrypt from "bcrypt";
import jwt from 'jsonwebtoken';

const generateToken = (userId) => {
    const token = jwt.sign({userId}, process.env.JWT_SECRET, {expiresIn: '7d'})
    return token;  // this function will generate and return the token 
}

//controller for user registration : in this function we have to provide some data so we use the POST method
//POST: /api/users/register
export const registerUser = async (req, res) => {
    try {
        const {name, email, password} = req.body;

        // check if required fields are present
        if(!name || !email || !password) {
            return res.status(400).json({message: 'Missing required fields'})
        }

        //check if user already exists
        const user = await User.findOne({email})
        if(user) {
            return res.status(400).json({message: 'User already exists'})
        }

        //create new user but before creating we encrypt the users password
        const hashedPassword = await bcrypt.hash(password, 10) // 10 is the number of iterations used to hash the password
        const newUser = await User.create({
            name, email, password: hashedPassword
        })

        //after creating the user we have to generate the token and that token will be stored in the response so generate token function is at the top

        //return successs message
        const token = generateToken(newUser._id)  //the _id is auto generated by the mongoDB database
        newUser.password = undefined; //because we have to return this new user in the response

        return res.status(201).json({message: "User created successfully", token, user: newUser})

    } catch (error) {
        return res.status(400).json({message: error.message})
    }
}


//controller for user login : here also we are providing some data to the function hence it is a post request 
// POST : /api/users/login
export const loginUser = async (req, res) => {
    try {
        const {email, password} = req.body;

        //check if user exists
        const user = await User.findOne({email})
        if(!user) {
            return res.status(400).json({message: 'Invalid email or password'})
        }

        //check if password is correct
        if(!user.comparePassword(password)){
            return res.status(400).json({message: 'Invalid email or password'})

        }

        //if password is correct or matching then return success message
        const token = generateToken(user._id)  //the _id is auto generated by the mongoDB database
        user.password = undefined; //because we have to return this new user in the response

        return res.status(200).json({message: "Login successfully", token, user})

    } catch (error) {
        return res.status(400).json({message: error.message})
    }
}


//controller function for getting user by id : here we recieving some data so the type of the request is get
//GET: api/users/data
export const getUserById = async (req, res) => {
    try {

        const userId = req.userId;  // we are getting userId from the request but we are not adding userId int request, the userId will be added through middleware that we will create later

        //check if user exists
        const user = await User.findById(userId)
        if(!user){
            return res.status(404).json({message: 'User not found'})
        }

        //return user
        user.password = undefined;
        return res.status(200).json({user})

    } catch (error) {
        return res.status(400).json({message: error.message})
    }
}

//now we create the middleware for this fuction

